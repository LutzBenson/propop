[{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluate-projections","dir":"Articles","previous_headings":"","what":"Evaluate projections","title":"Evaluate projections","text":"propop provides function compare projections benchmark. benchmark can actual population development (.e., official records) base model (e.g., testing alternative models comparing official FSO forecast). Evaluations can carried individually per observation unit like summary statistics aggregated across observations (e.g., years, demographic groups, spatial units).","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"get-the-data","dir":"Articles","previous_headings":"Evaluate projections","what":"Get the data","title":"Evaluate projections","text":"run evaluation function, need benchmark data results projection. use population records canton Aargau 2019-2022 benchmark (2018 serve starting population): Get parameters projection: Run population projection 2019-2022:","code":"data_benchmark <- get_population(   number_fso = \"px-x-0102010000_101\",   year_first = 2018,   year_last = 2022,   spatial_units = \"- Aargau\" ) data_parameters <- get_parameters(   year_first = 2019,   year_last = 2050,   spatial_units = \"Aargau\" ) data_projected <- propop(   parameters = data_parameters |>     dplyr::filter(scen == \"reference\"),   year_first = 2019,   year_last = 2050,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   # population records from 2018 as starting point   population = data_benchmark |>     dplyr::filter(year == 2018),   subregional = FALSE,   binational = TRUE )"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units","dir":"Articles","previous_headings":"Evaluate projections > Evaluate 1-year age classes","what":"Evaluation of observation units","title":"Evaluate projections","text":"Let’s first compare projected population growth recorded population development (= benchmark) using one-year age classes (default option). Make sure provide matching data frames, especially terms year ranges spatial units. remove starting population (2018) projection results, also use drop_start_year = TRUE. result prepare_evaluation(), get recorded (n_bench) projected (n_proj) population demographic group year data frame columns next : Based difference observed projected number people, compute_measures() calculates error several performance metrics:","code":"# Combine and pre-process the data combined <- prepare_evaluation(   # only keep years from projected period   data_benchmark = data_benchmark |> dplyr::filter(year > 2018),   data_projected = data_projected |> dplyr::filter(year > 2018 & year <= 2022) )  # Show combined data combined #> # A tibble: 1,616 × 7 #>     year spatial_unit nat   sex     age n_bench n_proj #>    <int> <chr>        <chr> <chr> <dbl>   <dbl>  <dbl> #>  1  2019 Aargau       ch    m         0    2622   2510 #>  2  2019 Aargau       ch    m         1    2593   2551 #>  3  2019 Aargau       ch    m         2    2635   2631 #>  4  2019 Aargau       ch    m         3    2596   2609 #>  5  2019 Aargau       ch    m         4    2683   2670 #>  6  2019 Aargau       ch    m         5    2737   2738 #>  7  2019 Aargau       ch    m         6    2636   2633 #>  8  2019 Aargau       ch    m         7    2609   2594 #>  9  2019 Aargau       ch    m         8    2642   2632 #> 10  2019 Aargau       ch    m         9    2657   2654 #> # ℹ 1,606 more rows evaluation_1 <- compute_measures(combined)  #> Warning message: #> The following columns of the output have `Inf` values: #> ! \"pe\" and \"ape\". #> ℹ `Inf` values are probably caused by divisions by zero(e.g., when `n_bench` = 0). #> Consider using age groups thatinclude more than 1 year.  # Create table evaluation_1 |>   # select demographic group   dplyr::filter(sex == \"m\" & nat == \"ch\" & age == 27) |>   # round to two digits   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     filter = \"none\",     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Performance measures for projections with 1-year age classes for the       canton of Aargau 2019-2022; only one demographic group is displayed.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation","dir":"Articles","previous_headings":"Evaluate projections > Evaluate 1-year age classes","what":"Aggregated evaluation","title":"Evaluate projections","text":"obtain summary statistics whole projection model, can use aggregate_measures() function: Note warning message: Several evaluation measures Inf values. reason allowed divide 0.","code":"aggregate_measures(evaluation_1) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Evaluation measures of projection with one-year age classes, aggregated        across all observations.\"     )) #> Warning message: #> The following columns in `data` have `Inf` values: #> ! \"pe\" and \"ape\". #> ℹ `Inf` values are probably caused by divisions by zero (e.g., when `n_bench` = 0). Consider using larger age groups that include more than 1 year. #> Warning message: #> The following columns in the output have `Inf` values: #> ! \"mpe\" and \"mape\"."},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluate-larger-age-groups","dir":"Articles","previous_headings":"Evaluate projections","what":"Evaluate larger age groups","title":"Evaluate projections","text":"One-year age classes often lead small group sizes. particularly problematic benchmark equal 0; several measures computed divisions zero allowed (Inf values returned). solution problem use larger age groups contain several years.","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units-1","dir":"Articles","previous_headings":"Evaluate projections > Evaluate larger age groups","what":"Evaluation of observation units","title":"Evaluate projections","text":"Instead using one-year age classes, can conduct evaluation commonly used age groups 0-19 year olds, 20-64 year olds, 64 year olds using option age_groups = \"age_groups_3\".","code":"# Combine and pre-process the data combined_grouped <- prepare_evaluation(   # only keep years from projected period   data_benchmark = data_benchmark |> dplyr::filter(year > 2018),   data_projected = data_projected |> dplyr::filter(year > 2018 & year <= 2022),   age_groups = \"age_groups_3\" )  # Show combined data combined_grouped #> # A tibble: 48 × 7 #>     year spatial_unit age         sex   nat   n_bench n_proj #>    <int> <chr>        <chr>       <chr> <chr>   <dbl>  <dbl> #>  1  2019 Aargau       age_00_19   f     ch      49279  49129 #>  2  2019 Aargau       age_00_19   f     int     17818  18118 #>  3  2019 Aargau       age_00_19   m     ch      52389  52076 #>  4  2019 Aargau       age_00_19   m     int     19323  19566 #>  5  2019 Aargau       age_20_64   f     ch     151860 151781 #>  6  2019 Aargau       age_20_64   f     int     56115  56380 #>  7  2019 Aargau       age_20_64   m     ch     149279 149263 #>  8  2019 Aargau       age_20_64   m     int     66770  67029 #>  9  2019 Aargau       age_65_plus f     ch      59729  59847 #> 10  2019 Aargau       age_65_plus f     int      6311   6332 #> # ℹ 38 more rows  # Compute the performance measures evaluation_2 <- compute_measures(combined_grouped)   evaluation_2 |>   # select demographic group   dplyr::filter(sex == \"m\" & nat == \"ch\" & age == \"age_20_64\") |>   # round to two digits   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Performance measures for projections with three age classes for the       canton of Aargau 2019-2022; only one demographic group is displayed.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation-1","dir":"Articles","previous_headings":"Evaluate projections > Evaluate larger age groups","what":"Aggregated evaluation","title":"Evaluate projections","text":"can use aggregate_measures() obtain summary evaluation across observations:","code":"aggregate_measures(evaluation_2) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Evaluation measures for projection with three age classes, aggregated        across all observations.\"     ))"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units-2","dir":"Articles","previous_headings":"Evaluate projections > Using group weights","what":"Evaluation of observation units","title":"Evaluate projections","text":"Furthermore, can use weights. using weighted metric, adjusted absolute percentage errors weigh less heavily smaller groups larger groups. adjusted metric w_ape considers smaller groups tend larger forecast errors. illustrated following table: unweigthed percentage errors (ape) 0.39/0.36 become 0.24/0.07 weighted total number people per group (w_ape).","code":"evaluation_3 <- compute_measures(combined_grouped, weight_groups = c(\"age\"))   evaluation_3 |>   dplyr::filter(year == 2019 & ape > .34 & ape < .39) |>   dplyr::mutate(across(pe:w_ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Selected results showing the effect of using weights        (ape versus w_ape).\"     ),   ) |>    DT::formatStyle(     columns = c('ape', 'w_ape'),     backgroundColor = '#96D4FF'     )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation-2","dir":"Articles","previous_headings":"Evaluate projections > Using group weights","what":"Aggregated evaluation","title":"Evaluate projections","text":"can also use aggregate_measures() obtain summary evaluation weighted groups:","code":"aggregate_measures(evaluation_3, weight_groups = c(\"age\")) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(options = list(dom = 't'))"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"propop-versus-fso","dir":"Articles","previous_headings":"Evaluate projections","what":"propop versus FSO","title":"Evaluate projections","text":"Instead comparing propop projection population records, can also use evaluation function check close propop projection comes FSO’s projection 2020 model. example data, differences extremely small (>= 1):","code":"fso_propop <- prepare_evaluation(   data_benchmark = data_parameters |>     dplyr::filter(scen == \"reference\" & year > 2018) |>     dplyr::mutate(n = n_projected),   data_projected = data_projected |>     dplyr::filter(year > 2018),   age_groups = \"age_groups_3\" ) |>   compute_measures()  fso_propop |>   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     filter = \"top\",     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Comparison of projetions from FSO versus `propop`.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Prepare data","text":"vignette shows obtain prepare relevant information run population projections package propop level Canton. information data required run propop::propop() (propop::project_raw()) can downloaded STAT-TAB. specifically, information following tables needed: Overview required FSO tables (STAT-TAB) Inter-cantonal immigration Inter-cantonal emigration International immigration International emigration end year population size 101 101 Births per mother Mortality International emigration Inter-cantonal emigration Acquisition Swiss citizenship Live newborns Live births age nationality mother (varies cantons) Start (16) end (50) fertile age women Proportion newborns female sex (100/205)","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"convenient-way-to-get-fso-data","dir":"Articles","previous_headings":"","what":"Convenient way to get FSO data","title":"Prepare data","text":"propop package provides two convenience functions download data FSO. get starting population spatial unit, must use spelling defined corresponding FSO table. entries FSO tables may contain special characters. spelling may also vary FSO tables. BFS::bfs_get_metadata() helpful identify required spelling(s) (see page). ’s example get population canton Aargau: Get parameters sample canton (mind using spelling FSO tables; see comment ): projection can run follows: Note caution: long FSO’s API interface underlying data structure remain stable, functions work. However, changes API likely break functions.","code":"library(propop)  ag_population <- get_population(   number_fso = \"px-x-0102010000_101\",   year_first = 2022,   year_last = 2022,   spatial_units = \"- Aargau\" ) ag_parameters <- get_parameters(   year_first = 2023,   year_last = 2026,   spatial_units = c(\"Aargau\") ) # select reference scenario ag_parameters_ref <- ag_parameters |>   dplyr::filter(scen == \"reference\")  propop(   parameters = ag_parameters_ref,   year_first = 2023,   year_last = 2026,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = ag_population,   subregional = FALSE,   binational = TRUE )"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"manual-way-to-get-fso-data","dir":"Articles","previous_headings":"","what":"Manual way to get FSO data","title":"Prepare data","text":"case shouldn’t work want retrace necessary steps manually, also provide step--step description get population data projection parameters FSO.","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Prepare data","text":"download data, need following packages:","code":"library(BFS) # to download FSO data library(dplyr) # to process data library(tidyr) # to wrangle data library(propop) # to run population projection"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"prepare-queries-and-download-data","dir":"Articles","previous_headings":"","what":"Prepare queries and download data","title":"Prepare data","text":"make data download faster, save disk space, avoid filtering download, advisable specify download information really need. prepare customised, reduced data download, instructions BFS package helpful. Following instructions, can use text valueTexts variables generate query dimension object table download data (see following subsections). illustrate, table px-x-0104020000_101, can obtain meta data follows: Although structure first three tables identical, low growth scenario (_103) contains different meta information requires changes.","code":"metadata <- BFS::bfs_get_metadata(number_bfs = \"px-x-0104020000_101\") metadata_tidy <- metadata |>   select(-valueTexts) |>   unnest_longer(values) |>   dplyr::mutate(     valueTexts = metadata |>       select(valueTexts) |>       unnest_longer(valueTexts) |>       pull(valueTexts)   ) |>   select(code, text, values, valueTexts, everything())  head(metadata_tidy) #> # A tibble: 6 × 6 #>   code   text   values valueTexts   elimination title                            #>   <chr>  <chr>  <chr>  <chr>        <lgl>       <chr>                            #> 1 Kanton Kanton 0      Schweiz      TRUE        Szenarien zur Bevölkerungsentwi… #> 2 Kanton Kanton 1      Zürich       TRUE        Szenarien zur Bevölkerungsentwi… #> 3 Kanton Kanton 2      Bern / Berne TRUE        Szenarien zur Bevölkerungsentwi… #> 4 Kanton Kanton 3      Luzern       TRUE        Szenarien zur Bevölkerungsentwi… #> 5 Kanton Kanton 4      Uri          TRUE        Szenarien zur Bevölkerungsentwi… #> 6 Kanton Kanton 5      Schwyz       TRUE        Szenarien zur Bevölkerungsentwi…"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"get-number-of-people-parameters","dir":"Articles","previous_headings":"Prepare queries and download data","what":"Get “number of people” parameters","title":"Prepare data","text":"FSO’s expectations expressed “number people” parameters (first three entries table). parameters indicate FSO expectations many people certain things (e.g., many 64-year old Swiss men emigrate another country 2043). prepare download parameters, can specify following query: Using specifications, can download FSO “number people” parameters follows:","code":"# Specify the elements to download dim1 <- metadata_tidy |>   dplyr::filter(     text == \"Kanton\" & # Canton       valueTexts %in% c(\"Aargau\")   )  dim2 <- metadata_tidy |>   dplyr::filter(     text == \"Geschlecht\" & # sex       valueTexts %in% c(         \"Mann\", # male         \"Frau\"       )   ) # female  dim3 <- metadata_tidy |>   dplyr::filter(     text == \"Alter\" & # get each age group       !(valueTexts %in% \"Alter - Total\")   ) # but exclude \"Total\"  dim4 <- metadata_tidy |>   dplyr::filter(text == \"Jahr\") # get all years  # adapt to the different structure of the \"low\" scenario table dim4_103 <- metadata_tidy |>   dplyr::filter(     text == \"Jahr\"   ) |> # get all years   dplyr::mutate(values = as.character(0:31))  dim5 <- metadata_tidy |>   dplyr::filter(     text == \"Staatsangehörigkeit (Kategorie)\" & # nationality       valueTexts %in% c(         \"Schweiz\", # Swiss         \"Ausland\"       )   ) # Foreign / international  dim6 <- metadata_tidy |>   dplyr::filter(     text == \"Beobachtungseinheit\" & # parameters for projection       valueTexts %in% c(         \"Einwanderungen\", # international immigration         \"Auswanderungen\", # international emigration         \"Interkantonale Zuwanderungen\", # inter-cantonal immigration         \"Interkantonale Abwanderungen\" # inter-cantonal emigration       )   )  # build dimensions list object dimensions <- list(   dim1$values,   dim2$values,   dim3$values,   dim4$values,   dim5$values,   dim6$values ) # add names names(dimensions) <- c(   unique(dim1$code),   unique(dim2$code),   unique(dim3$code),   unique(dim4$code),   unique(dim5$code),   unique(dim6$code) )  # version for _103 # build dimensions list object dimensions_103 <- list(   dim1$values,   dim2$values,   dim3$values,   dim4_103$values,   dim5$values,   dim6$values )  # add names names(dimensions_103) <- c(   unique(dim1$code),   unique(dim2$code),   unique(dim3$code),   unique(dim4_103$code),   unique(dim5$code),   unique(dim6$code) ) # reference scenario fso_numbers_r <- BFS::bfs_get_data(   number_bfs = \"px-x-0104020000_101\",   query = dimensions ) |>   rename(value = paste0(     \"Szenarien zur Bevölkerungsentwicklung der Kantone 2020-2050,\",     \" Referenzszenario AR-00-2020 - zukünftige Bevölkerungsentwicklung\"   )) |>   dplyr::mutate(scen = \"reference\")  # high growth scenario fso_numbers_h <- BFS::bfs_get_data(   number_bfs = \"px-x-0104020000_102\",   query = dimensions ) |>   rename(value = paste0(     \"Szenarien zur Bevölkerungsentwicklung der Kantone 2020-2050,\",     \" 'hohes' Szenario BR-00-2020 - zukünftige Bevölkerungsentwicklung\"   )) |>   dplyr::mutate(scen = \"high\")  # low growth scenario fso_numbers_l <- BFS::bfs_get_data(   number_bfs = \"px-x-0104020000_103\",   query = dimensions_103 ) |>   rename(value = paste0(     \"Szenarien zur Bevölkerungsentwicklung der Kantone 2020-2050,\",     \" 'tiefes' Szenario CR-00-2020 - zukünftige Bevölkerungsentwicklung\"   )) |>   dplyr::mutate(scen = \"low\")  # combine into a single data frame fso_numbers_raw <- full_join(fso_numbers_r, fso_numbers_h) |>   full_join(fso_numbers_l)"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"get-rates-and-probabilities","dir":"Articles","previous_headings":"Prepare queries and download data","what":"Get “rates” and “probabilities”","title":"Prepare data","text":"FSO indicates expectations “rates” “probabilities” (row four overview table top). illustrate, parameters indicate likelihood 24-year old Swiss women child year 2034. can download data, need metadata: download “rate” “probability” parameters (last row table), can use following specifications: Using specifications, can download FSO “rate” parameters follows: need process data ensure structure rate parameters conforms expectations projection function:","code":"metadata <- BFS::bfs_get_metadata(number_bfs = \"px-x-0104020000_109\")  metadata_tidy <- metadata |>   select(-valueTexts) |>   unnest_longer(values) |>   dplyr::mutate(     valueTexts = metadata |>       select(valueTexts) |>       unnest_longer(valueTexts) |>       pull(valueTexts)   ) |>   select(code, text, values, valueTexts, everything())  head(metadata_tidy) #> # A tibble: 6 × 6 #>   code   text   values valueTexts   elimination title                            #>   <chr>  <chr>  <chr>  <chr>        <lgl>       <chr>                            #> 1 Kanton Kanton 0      Zürich       NA          Szenarien zur Bevölkerungsentwi… #> 2 Kanton Kanton 1      Bern / Berne NA          Szenarien zur Bevölkerungsentwi… #> 3 Kanton Kanton 2      Luzern       NA          Szenarien zur Bevölkerungsentwi… #> 4 Kanton Kanton 3      Uri          NA          Szenarien zur Bevölkerungsentwi… #> 5 Kanton Kanton 4      Schwyz       NA          Szenarien zur Bevölkerungsentwi… #> 6 Kanton Kanton 5      Obwalden     NA          Szenarien zur Bevölkerungsentwi… # Specify the elements to download dim1 <- metadata_tidy |>   dplyr::filter(     text == \"Kanton\" & # Canton       valueTexts %in% c(\"Aargau\")   )  dim2 <- metadata_tidy |>   dplyr::filter(     text == \"Szenario-Variante\" & # sex       valueTexts %in% c(         \"Referenzszenario AR-00-2020\", # reference scenario         \"'hohes' Szenario BR-00-2020\", # high growth         \"'tiefes' Szenario CR-00-2020\"       )   ) # low growth  dim3 <- metadata_tidy |>   dplyr::filter(     text == \"Staatsangehörigkeit (Kategorie)\" & # nationality       valueTexts %in% c(         \"Schweiz\", # Swiss         \"Ausland\"       )   ) # Foreign / international  dim4 <- metadata_tidy |>   dplyr::filter(     text == \"Geschlecht\" & # sex       valueTexts %in% c(         \"Mann\", # male         \"Frau\"       )   ) # female  dim5 <- metadata_tidy |>   dplyr::filter(     text == \"Alter\" & # all 1-year age groups       !(valueTexts %in% \"Alter - Total\")   ) # but exclude \"Total\"  dim6 <- metadata_tidy |>   dplyr::filter(     text == \"Jahr\"   ) # get all years  dim7 <- metadata_tidy |>   dplyr::filter(     text == \"Beobachtungseinheit\" & # type of parameter types       valueTexts %in% c(         \"Geburtenziffern\", # births         \"Prospektive Sterbewahrscheinlichkeiten\", # mortality         \"Auswanderungsziffern\", # international emigration         \"Interkantonale Abwanderungsziffern\", # inter-cantonal emigration         \"Einbürgerungsziffern\"       )   ) # acquisition of Swiss citizenship  # build dimensions list object dimensions <- list(   dim1$values,   dim2$values,   dim3$values,   dim4$values,   dim5$values,   dim6$values,   dim7$values ) # add names names(dimensions) <- c(   unique(dim1$code),   unique(dim2$code),   unique(dim3$code),   unique(dim4$code),   unique(dim5$code),   unique(dim6$code),   unique(dim7$code) ) # Download rate parameters fso_rates_raw <- BFS::bfs_get_data(   number_bfs = \"px-x-0104020000_109\",   query = dimensions ) # Bring variable names and factor levels into the format required later fso_rates <- fso_rates_raw |>   dplyr::rename(     nat = \"Staatsangehörigkeit (Kategorie)\",     sex = Geschlecht,     age = Alter,     year = Jahr,     fso_parameter = Beobachtungseinheit,     scen = \"Szenario-Variante\",     value =       \"Szenarien zur Bevölkerungsentwicklung der Kantone 2020-2050 - Ziffern\"   ) |>   # change factor levels   dplyr::mutate(     scen = case_match(       scen,       \"Referenzszenario AR-00-2020\" ~ \"reference\",       \"'hohes' Szenario BR-00-2020\" ~ \"high\",       \"'tiefes' Szenario CR-00-2020\" ~ \"low\"     ),     nat = case_match(       nat,       \"Schweiz\" ~ \"ch\",       \"Ausland\" ~ \"int\"     ),     sex = case_when(       sex == \"Mann\" ~ \"m\",       sex == \"Frau\" ~ \"f\"     ),     age = as.numeric(stringr::str_extract(age, \"\\\\d+\")),     fso_parameter = case_match(       fso_parameter,       \"Prospektive Sterbewahrscheinlichkeiten\" ~ \"mor\",       \"Auswanderungsziffern\" ~ \"emi\",       \"Interkantonale Abwanderungsziffern\" ~ \"intercant\",       \"Einbürgerungsziffern\" ~ \"acq\",       \"Geburtenziffern\" ~ \"birth_rate\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"get-share-of-newborns-with-swiss-nationality-born-to-non-swiss-mothers","dir":"Articles","previous_headings":"Prepare queries and download data","what":"Get share of newborns with Swiss nationality born to non-Swiss mothers","title":"Prepare data","text":"Mothers Swiss citizenship may Swiss partner. children Swiss nationals. use information projection, need download another table compute corresponding parameter. can download data, need metadata: download “rate” “probability” parameters (last row table), can use following specifications: Using specifications, can download parameter follows: need process data ensure structure parameter conforms expectations projection function:","code":"# Get meta data to determine what to download metadata <- BFS::bfs_get_metadata(number_bfs = \"px-x-0104020000_106\") metadata_tidy <- metadata |>   dplyr::select(-valueTexts) |>   tidyr::unnest_longer(values) |>   dplyr::mutate(     valueTexts = metadata |>       dplyr::select(valueTexts) |>       tidyr::unnest_longer(valueTexts) |>       dplyr::pull(valueTexts)   ) |>   dplyr::select(code, text, values, valueTexts, everything()) # Specify the elements to download dim1 <- metadata_tidy |>   dplyr::filter(     text == \"Kanton\" & # Canton       valueTexts %in% c(\"Aargau\")   )  dim2 <- metadata_tidy |>   dplyr::filter(     text == \"Szenario-Variante\" & # scenario       valueTexts %in% c(         \"Referenzszenario AR-00-2020\",         \"'hohes' Szenario BR-00-2020\",         \"'tiefes' Szenario CR-00-2020\"       )   ) dim3 <- metadata_tidy |>   dplyr::filter(     text == \"Staatsangehörigkeit (Kategorie)\" & # nationality       valueTexts %in% \"Ausland\"   ) dim4 <- metadata_tidy |>   dplyr::filter(     text == \"Geschlecht\" & # sex       valueTexts %in% \"Geschlecht - Total\"   ) dim5 <- metadata_tidy |>   dplyr::filter(     text == \"Altersklasse\" & # age       valueTexts %in% \"Altersklasse - Total\"   ) dim6 <- metadata_tidy |>   dplyr::filter(     text == \"Jahr\"   ) # get all years dim7 <- metadata_tidy |>   dplyr::filter(     text == \"Beobachtungseinheit\" & # type of parameter types       valueTexts %in%         c(           # live births of international newborns to international mothers           \"Lebendgeburten\",           \"Lebendgeburten nach Alter und Staatsangehörigkeit der Mutter\"         )   ) # all live newborns to international mothers  # build dimensions list object dimensions <- list(   dim1$values,   dim2$values,   dim3$values,   dim4$values,   dim5$values,   dim6$values,   dim7$values )  # add names names(dimensions) <- c(   unique(dim1$code),   unique(dim2$code),   unique(dim3$code),   unique(dim4$code),   unique(dim5$code),   unique(dim6$code),   unique(dim7$code) ) # Download rate parameters fso_births_int_ch_raw <- BFS::bfs_get_data(   number_bfs = \"px-x-0104020000_106\",   query = dimensions ) # Bring variable names and factor levels into the format required later # Process data fso_births_int_ch <- fso_births_int_ch_raw |>   # Compute share of Swiss newborns to international mothers   tidyr::pivot_wider(     names_from = Beobachtungseinheit,     values_from = paste0(       \"Szenarien zur Bevölkerungsentwicklung der Kantone 2020-2050\",       \" - zukünftige Bevölkerungsentwicklung\"     )   ) |>   # use shorter, clearer names   dplyr::rename(     # all live births from international mothers     live_birth_total =       \"Lebendgeburten nach Alter und Staatsangehörigkeit der Mutter\",     # live births of international newborns to international mothers     live_birth_int = Lebendgeburten   ) |>   dplyr::mutate(     births_int_ch = (live_birth_total - live_birth_int) / live_birth_total   ) |>   # Bring variable names and factor levels into the format required later   dplyr::rename(     scen = \"Szenario-Variante\",     age = Altersklasse,     year = Jahr   ) |>   # change factor levels   dplyr::mutate(     scen = dplyr::case_match(       scen,       \"Referenzszenario AR-00-2020\" ~ \"reference\",       \"'hohes' Szenario BR-00-2020\" ~ \"high\",       \"'tiefes' Szenario CR-00-2020\" ~ \"low\"     )   ) |>   # remove unnecessary variables   select(year, scen, births_int_ch) |>   dplyr::arrange(year, scen)"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"all-fso-parameters","dir":"Articles","previous_headings":"Prepare queries and download data","what":"All FSO parameters","title":"Prepare data","text":"Now can merge “number people” “rate” parameters, make data frame wider, compute required parameter inter-cantonal net migration: Show parameters one demographic group year 2024:","code":"projection_parameters <- dplyr::full_join(fso_rates, fso_numbers) |>   tidyr::pivot_wider(names_from = fso_parameter, values_from = value) |>   # compute inter-cantonal net migration   dplyr::mutate(mig_ch = interc_imm - interc_emi) |>   left_join(fso_births_int_ch, by = c(\"year\", \"scen\")) |>   # add mandatory column spatial_unit   dplyr::mutate(spatial_unit = \"Aargau\") |>   # remove unnecessary variables   dplyr::select(-c(Kanton, intercant, emi_n, interc_imm, interc_emi)) |>   dplyr::arrange(year) projection_parameters |>   dplyr::filter(year == 2024 & sex == \"f\" & nat == \"int\" & age == 0) |>   DT::datatable()"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"population","dir":"Articles","previous_headings":"Prepare queries and download data","what":"Population","title":"Prepare data","text":"addition parameters, projection function propop also requires starting population. prepare corresponding query, start metadata: can now specify levels variables want: Using specifications, can download FSO “population” follows: now process data ensure population data conforms structure expected propop::propop():","code":"metadata_pop <- BFS::bfs_get_metadata(number_bfs = \"px-x-0102010000_101\")  metadata_pop_tidy <- metadata_pop |>   select(-valueTexts) |>   unnest_longer(values) |>   mutate(     valueTexts = metadata_pop |>       select(valueTexts) |>       unnest_longer(valueTexts) |>       pull(valueTexts)   ) |>   select(code, text, values, valueTexts, everything()) # Specify the elements to download dim1 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Kanton (-) / Bezirk (>>) / Gemeinde (......)\" & # Canton       valueTexts %in% c(\"- Aargau\")   )  dim2 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Jahr\" & # year       valueTexts %in% c(\"2018\")   )  dim3 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Bevölkerungstyp\" & # permanent       valueTexts %in% \"Ständige Wohnbevölkerung\"   )  dim4 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Staatsangehörigkeit (Kategorie)\" & # nationality       valueTexts %in% c(\"Schweiz\", \"Ausland\")   )  dim5 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Geschlecht\" & # sex       valueTexts %in% c(\"Mann\", \"Frau\")   )  dim6 <- metadata_pop_tidy |>   dplyr::filter(     text == \"Alter\" & # age       !(valueTexts %in% \"Alter - Total\")   ) # exclude \"Total\"  # build dimensions list object dimensions <- list(   dim1$values,   dim2$values,   dim3$values,   dim4$values,   dim5$values,   dim6$values ) # add names names(dimensions) <- c(   unique(dim1$code),   unique(dim2$code),   unique(dim3$code),   unique(dim4$code),   unique(dim5$code),   unique(dim6$code) ) # Download population fso_pop_raw <- BFS::bfs_get_data(   number_bfs = \"px-x-0102010000_101\", # reference scenario   query = dimensions ) # Bring variable names and factor levels into the format required later starting_population <- fso_pop_raw |>   dplyr::select(-\"Bevölkerungstyp\") |>   dplyr::rename(     year = Jahr,     Kanton = \"Kanton (-) / Bezirk (>>) / Gemeinde (......)\",     nat = \"Staatsangehörigkeit (Kategorie)\",     sex = Geschlecht,     age = Alter,     n = \"Ständige und nichtständige Wohnbevölkerung\"   ) |>   # change factor levels   mutate(     Kanton = stringr::str_remove_all(Kanton, \"- \"),     nat = case_match(       nat,       \"Schweiz\" ~ \"ch\",       \"Ausland\" ~ \"int\"     ),     sex = case_when(       sex == \"Mann\" ~ \"m\",       sex == \"Frau\" ~ \"f\"     ),     age = as.numeric(stringr::str_extract(age, \"\\\\d+\"))   ) |>   dplyr::rename(spatial_unit = Kanton)  starting_population |>   DT::datatable()"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"run-population-projections","dir":"Articles","previous_headings":"","what":"Run population projections","title":"Prepare data","text":"Now parameters starting population available, can run population projections (see vignette `run_projections` details). result shown one demographic group.","code":"# only keep reference scenario projection_parameters_ref <- projection_parameters |>   filter(scen == \"reference\")  # run propop with data from prepare vignette to make sure vignette is okay results_clean <- propop(   parameters = projection_parameters_ref,   year_first = 2019,   year_last = 2030,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = starting_population,   subregional = FALSE,   binational = TRUE )  results_clean |>   # select demographic group   dplyr::filter(sex == \"f\" & nat == \"int\" & age == 49) |>   dplyr::mutate(across(n, \\(x) sprintf(fmt = \"%.0f\", x))) |>   DT::datatable(filter = \"top\")"},{"path":"https://statistik-aargau.github.io/propop/articles/run_projections.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Run projections","text":"propop::propop() can perform population projections either one several regions. function applys Cohort Component Method tailored context Switzerland. , package built run information provided Federal Statistical Office (FSO). run function, need provide: data frame starting population, , --date number people demographic group first projection year; illustrate, example population data propop 31. December 2018 first projection year 2019. data frame containing model parameters, , information key demographic variables mortality expected develop future; global arguments change time across demographic groups. Importantly, two data frames’ structure (number, names, type columns) must correspond exactly specifications shown vignette. Among things, mandatory provide two levels sex nationality. function flexible respect age groups. Although examples use 1-year age groups ranging 0 100 (incl. older), model also run aggregated groups (e.g., 0-19, 20-64, 65+ year olds) – provided information population parameter data frames compatible (e.g., aggregating parameters age groups).","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/run_projections.html","id":"projection-for-a-single-region","dir":"Articles","previous_headings":"","what":"Projection for a single region","title":"Run projections","text":"package propop includes population data canton Aargau 2018 FSO parameters population development scenarios 2020. Using resources, can project population canton whole 1-year age groups period 2019-2030. start end women’s fertile period, proportion babies born female, share babies born mothers Swiss stable parameters passed propop::propop() arguments.","code":"projection_canton_2030 <- propop(   parameters = fso_parameters,   year_first = 2019,   year_last = 2030,   population = fso_population,   subregional = FALSE,   binational = TRUE ) #> Running projection for: Aargau #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030  projection_canton_2030 |>   DT::datatable(filter = \"top\")"},{"path":"https://statistik-aargau.github.io/propop/articles/run_projections.html","id":"projection-for-multiple-subregions","dir":"Articles","previous_headings":"","what":"Projection for multiple subregions","title":"Run projections","text":"project population development subregions within superordinate entity (e.g., districts municipalities within canton), need input files multiple regions. Since yet available, create : can run projection subregions show results selected group:  information migration patterns within superordinate entity available (e.g., moving municipalities), subregional can set TRUE adjust population size subregion accordingly. requires imm_can additional parameter parameter data frame.","code":"# fso parameters for fictitious subregions fso_parameters_sub <- fso_parameters |>   # duplicating rows 5 times   tidyr::uncount(5) |>   # create 5 subregions   dplyr::mutate(spatial_unit = rep(1:5, times = nrow(fso_parameters))) |>   # divide the size of parameters with numbers by the number of regions (= 5);   # otherwise the multiplication of lines will inflate the population size.   dplyr::mutate(spatial_unit = as.character(spatial_unit))  # fso population for fictitious subregions fso_population_sub <- fso_population |>   dplyr::rename(n_tot = n) |>   # duplicating rows 5 times   tidyr::uncount(5) |>   # create 5 subregions   dplyr::mutate(spatial_unit = rep(1:5, times = nrow(fso_population))) |>   dplyr::mutate(     # Create fictitious n for each subregion     n = dplyr::case_match(       spatial_unit,       1 ~ round(n_tot * 0.3),       2 ~ round(n_tot * 0.25),       3 ~ round(n_tot * 0.2),       4 ~ round(n_tot * 0.15),       5 ~ round(n_tot * 0.1),       .default = NA     ),     .keep = \"all\"   ) |>   dplyr::mutate(spatial_unit = as.character(spatial_unit)) |>   dplyr::select(-n_tot) projection_subregions_2030 <- propop(   parameters = fso_parameters_sub,   year_first = 2019,   year_last = 2030,   population = fso_population_sub,   subregional = FALSE,   binational = TRUE ) #> Running projection for: 1 #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #> Running projection for: 2 #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #> Running projection for: 3 #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #> Running projection for: 4 #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #> Running projection for: 5 #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030  projection_subregions_2030 |>   dplyr::filter(sex == \"m\" & nat == \"int\" & age == 14) |>   DT::datatable(filter = \"top\")"},{"path":"https://statistik-aargau.github.io/propop/articles/run_projections.html","id":"no-distinction-between-nationalities","dir":"Articles","previous_headings":"","what":"No distinction between nationalities","title":"Run projections","text":"’s possible run projections without distinguishing Swiss non-Swiss nationals. simplest way achieve provide population data parameters without nationality-specific columns (remove nat, acq, births_int_ch). Let’s adapt input files accordingly. keep things simple, run projection one two nationalities. calling propop::propop(), need set binational = FALSE.  ","code":"fso_parameters_int <- fso_parameters |>   # drop Swiss people     dplyr::filter(nat == \"int\") |>   #   remove `nat`, `acq` and `births_int_ch` from `parameters`     dplyr::select(-c(nat, acq, births_int_ch))  fso_population_int <- fso_population |>  # drop Swiss people     dplyr::filter(nat == \"int\") |>     # remove `nat` from `population`      dplyr::select(-nat) projection_int <- propop(   parameters = fso_parameters_int,   year_first = 2019,   year_last = 2030,   population = fso_population_int,   subregional = FALSE,   binational = FALSE ) #> Running projection for: Aargau #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> ✔ Year: 2023 #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030  projection_int |>   DT::datatable(filter = \"top\")"},{"path":"https://statistik-aargau.github.io/propop/articles/run_projections.html","id":"interpretation-of-the-output-file","dir":"Articles","previous_headings":"","what":"Interpretation of the output file","title":"Run projections","text":"output file includes number people (n) per demographic group base year projected years.","code":""},{"path":"https://statistik-aargau.github.io/propop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Norah Efosa. Author, maintainer. Adrian Gadient. Author. Tina Cornioley. Author. Jan Wunder. Author. Niklas Haffert. Author. Andrea Plüss. Contributor. Nadine Herrmann. Contributor. Statistik Aargau. Funder, copyright holder.","code":""},{"path":"https://statistik-aargau.github.io/propop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Efosa N, Gadient , Cornioley T, Wunder J, Haffert N (2024). propop: Project Population Growth Switzerland using Cohort Component Method. R package version 0.1.0, https://github.com/statistik-aargau/propop.","code":"@Manual{,   title = {{propop}: Project Population Growth in Switzerland using the Cohort Component Method},   author = {Norah Efosa and Adrian Gadient and Tina Cornioley and Jan Wunder and Niklas Haffert},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/statistik-aargau/propop}, }"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"goal propop create population projections using cohort component method (see e.g., Preston, Guillot, Heuveline, 2000; Statistik Aargau, 2020a; Statistik Aargau, 2020b). package developed use population data projection scenarios Swiss Federal Statistical Office (FSO). propop uses matrix calculation method FSO therefore reveals almost identical results (see vignette Evaluate projections). package can used project development different demographic groups different scenarios different spatial levels (e.g., single canton municipalities within canton). Although package developed use Switzerland, principle also work contexts, provided required input data available specified form.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"install current github version package, make sure devtools installed type:","code":"devtools::install_github(\"statistik-aargau/propop\")"},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"package currently includes three vignettes. first vignette demonstrates download prepare FSO population data parameters. (Users can course use data parameters). second vignette illustrates detail project population development single multiple regions. third vignette shows evaluate projections.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"features-limitations-future-plans","dir":"","previous_headings":"","what":"Features, limitations, future plans","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"Currently, propop::propop() works 1-year age classes starting age zero including fertile years females. propop::propop() works either two nationalities (usually Swiss vs.  non-Swiss nationals) without distinction nationalities. FSO uses additional ex-post adjustments ensure sums involving different cantons add , leads differences projections FSO propop. Moreover, FSO projections published five-year intervals, recent ones based population records 2018. propop enables run projections recent population records. package developed use FSO parameters. parameters available cantons whole Switzerland. wish run projections smaller scales (e.g., districts), need prepare parameters spatial entity running projection. Similarly, wish adjust parameters (e.g., mortality rates vary regions) need prepare parameters accordingly. propop::propop()offers possibility account varying subregional migration patterns migration subregions. However, using feature, users must adjust calculate required parameters. Custom parameters (e.g., consideration sub-cantonal spatial entities, adjustments reflect regional differences, addition subregional migration parameter) can passed parameters object propop::propop(). also possible future features increase accuracy projections. example, considering attractiveness municipalities planned housing developments help better explain population growth varies municipalities. limitation propop::propop() final number projected people per demographic group (n) returned. currently possible obtain individual components (e.g., births, deaths, immigration, emigration) population equation. interested contributing developments, please get touch package maintainer.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"run propop::propop() example data included package (canton Aargau) period 2019-2030, use following code:","code":"library(propop) projection_canton_2030 <- propop(   parameters = fso_parameters,   year_first = 2019,   year_last = 2030,   population = fso_population,   subregional = FALSE)"},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate evaluation measures — aggregate_measures","title":"Aggregate evaluation measures — aggregate_measures","text":"Returns descriptive summary statistics model accuracy bias measures across demographic groups years. returned statistics particularly useful comparing model performance different groups different models.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate evaluation measures — aggregate_measures","text":"","code":"aggregate_measures(data, weight_groups = NULL)"},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate evaluation measures — aggregate_measures","text":"data data frame created function compute_measures. weight_groups character, optional argument indicating one column names obtain evaluation criteria weighted specific groups (e.g., age groups, nationality).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate evaluation measures — aggregate_measures","text":"#' data frame. data frame includes following summary measures: mpe mean percentage error (mpe; mean algebraic percentage error malpe); bias indicator takes direction error account. Positive values indicate projections , overall, high. Negative values indicate projections , overall, low. closer value zero, lower bias. medpe median (middle value) percentage error (medpe). Particularly useful small samples skewed distributions. closer value zero, lower bias. mape mean absolute percentage / proportional error (mape). considers variance (amplitude) can seen measure precision. smaller value, lower average error. medape median (middle value) absolute percentage error (medape). Particularly useful small samples skewed distributions. smaller value, lower average error. rmse root mean square error; indication robustness quality projection. smaller value, robust projection. wmape weighted mean absolute percentage error (wmape); contrast mape, measure weights absolute percentage error according population size \"focal\" group (e.g., nationality, age group) thus considers domain size. Put differently, errors count populous groups less populous groups. measure particularly useful population sizes vary strongly. closer value, precise projection. n_measure number times summary measure occurs (per weight group requested). ape_under_1 measure gauge error distribution; indicates proportion observations absolute percentage errors smaller 1%. ape_under_5 measure gauge error distribution; indicates proportion observations absolute percentage errors smaller 5%.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregate evaluation measures — aggregate_measures","text":"Baker, J., et al. (2015). Sub-county population estimates using administrative records: municipal-level case study New Mexico. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 63-79). Springer, https://doi.org/10.1007/978-94-017-8990-5_6 Bérard-Chagnon, J. (2015) Using tax data estimate number families households Canada. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 137-153). Springer, https://doi.org/10.1007/978-94-017-8990-5_10 Reinhold M. & Thomsen, S. L. (2015) Subnational population projections age: evaluation combined forecast techniques, Population Research Policy Review, 34, 593-613, https://doi.org/10.1007/s11113-015-9362-0 Wilson, T. (2012). Forecast accuracy uncertainty Australian Bureau Statistics state territory population projections, International Journal Population Research, 1, 419824, https://doi.org/10.1155/2012/419824 Wilson, T. (2016). Evaluation alternative cohort-component models local area population forecasts, Population Research Policy Review, 35, 241-261, https://doi.org/10.1007/s11113-015-9380-y","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute evaluation measures — compute_measures","title":"Compute evaluation measures — compute_measures","text":"Uses differences benchmark results projection compute performance measures.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute evaluation measures — compute_measures","text":"","code":"compute_measures(combined, weight_groups = NULL)"},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute evaluation measures — compute_measures","text":"combined data frame created propop::prepare_evaluation(). weight_groups character, optional argument indicating one column names obtain evaluation criteria weighted specific groups (e.g., age groups, nationality).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute evaluation measures — compute_measures","text":"data frame. following evaluation criteria can directly interpreted used descriptive comparisons: error forecast error; quantifies level -projection (negative values) -projection (positive values) relative benchmark n_bench. pe percentage error expresses - / -projection percent benchmark n_bench. ape absolute percentage error; absolute deviation percent benchmark n_bench, thus showing extent error direction. w_ape weighted absolute percentage error; weighs absolute percentage error according population size focal group (e.g., nationality, age group). weighted version useful aggregated measure groups vary strongly terms population size. returned argument weight_groups contains least one grouping variable. following helper variables used compute aggregate measures. returned weight groups provided via argument weight_groups. n_tot total number people (.e., sum number people demographic groups); used compute weighted absolute percentage error. group_tot number people focal group; used compute weighted absolute percentage error. weight share (optional) focal group (e.g., municipality type / size, nationality, age group) relative people; used compute weighted absolute percentage error.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute evaluation measures — compute_measures","text":"input data frame created propop::prepare_evaluation(). includes benchmark (typically observed population records, .e., number people per spatial unit, demographic group, year) corresponding projected number people. input can range low resolution (e.g., total number people per municipality) high resolution (e.g., 101 age classes, nationality, sex). details usage, see vignette(\"evaluate\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute evaluation measures — compute_measures","text":"Baker, J., et al. (2015). Sub-county population estimates using administrative records: municipal-level case study New Mexico. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 63-79). Springer, https://doi.org/10.1007/978-94-017-8990-5_6 Wilson, T. (2012). Forecast accuracy uncertainty Australian Bureau Statistics state territory population projections, International Journal Population Research, 1, 419824, https://doi.org/10.1155/2012/419824 Wilson, T. (2016). Evaluation alternative cohort-component models local area population forecasts, Population Research Policy Review, 35, 241-261, https://doi.org/10.1007/s11113-015-9380-y","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute evaluation measures — compute_measures","text":"","code":"if (FALSE) { # Get evaluation measures without weights compute_measures(combined) # Get evaluation measures weighted for groups compute_measures(combined, weight_groups = c(\"age\", \"nat\")) }"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameters to run population projection — fso_parameters","title":"Sample parameters to run population projection — fso_parameters","text":"Data frame containing rates number people Federal Statistical Office (FSO) required project development four demographic groups selected canton (Aargau). parameters model published 2020. sample data include reference scenario years 2019-2030.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameters to run population projection — fso_parameters","text":"","code":"fso_parameters"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample parameters to run population projection — fso_parameters","text":"example data include required parameters demographic group (nationality (2) X sex (2) X age classes (101)) years 2019-2030.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample parameters to run population projection — fso_parameters","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_103/-/px-x-0104020000_103.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"demographic-groups","dir":"Reference","previous_headings":"","what":"Demographic groups","title":"Sample parameters to run population projection — fso_parameters","text":"returned data frame includes parameters unique combination following demographic variables: nat: ch = Swiss; int = foreign / international. sex: f = female, m = male. age: 101 one-year age classes, ranging 0 100 (including older 100).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Sample parameters to run population projection — fso_parameters","text":"following parameters included returned data frame: year: character, year projection. scen: character, projection scenario. birth_rate: numeric, number children per year. births_int_ch: numeric, proportion children Swiss nationality born non-Swiss mothers. mor: numeric, prospective mortality (probability death). emi: numeric, rate people emigrating abroad. acq: numeric, rate acquisition Swiss citizenship. imm_int: numeric, number people immigrating abroad. mig_ch: numeric, national / inter-cantonal net migration (number immigrants minus number emigrants). spatial_unit: character, indicating user requested spatial unit(s).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"details-about-calculated-variables","dir":"Reference","previous_headings":"","what":"Details about calculated variables","title":"Sample parameters to run population projection — fso_parameters","text":"births_int_ch calculated dividing number live newborns Swiss citizenship born non-Swiss mothers number live newborns born non-Swiss mothers. mig_ch calculated difference immigration cantons emigration cantons.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample population data from the Federal Statistical Office — fso_population","title":"Sample population data from the Federal Statistical Office — fso_population","text":"Data frame containing starting population required project development four demographic groups selected canton (Aargau). data 2018 obtained Federal Statistical Office (FSO).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample population data from the Federal Statistical Office — fso_population","text":"","code":"fso_population"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample population data from the Federal Statistical Office — fso_population","text":"example population records include number people demographic group (nationality (2) X sex (2) X age classes (101)) canton Aargau 2018.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample population data from the Federal Statistical Office — fso_population","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample population data from the Federal Statistical Office — fso_population","text":"data frame. four demographic groups (female / male, Swiss / foreign nationals), 101 age classes, resulting total 404 rows per requested year spatial unit. Columns included returned data frame: year character, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_projections.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample population projections from FSO for the canton of Aargau — fso_projections","title":"Sample population projections from FSO for the canton of Aargau — fso_projections","text":"Data frame containing population projections Federal Statistical Office (FSO) four demographic groups canton Aargau. projections model published 2020. sample data include reference scenario years 2019-2030.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_projections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample population projections from FSO for the canton of Aargau — fso_projections","text":"","code":"fso_projections"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_projections.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample population projections from FSO for the canton of Aargau — fso_projections","text":"example projections include projected number people demographic group (nationality (2) X sex (2) X age classes (101)) years 2019-2030.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_projections.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample population projections from FSO for the canton of Aargau — fso_projections","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_projections.html","id":"variables","dir":"Reference","previous_headings":"","what":"Variables","title":"Sample population projections from FSO for the canton of Aargau — fso_projections","text":"year: character, year projection. scen: character, including \"reference\" scenario. nat: character, ch = Swiss; int = foreign / international. sex: character, f = female, m = male. age: numeric, 101 one-year age classes, ranging 0 100 (including older 100). spatial_unit: character, indicating data refer canton Aargau. n_projected: numeric, number people per demographic group year.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get projection parameters from FSO — get_parameters","title":"Get projection parameters from FSO — get_parameters","text":"Users mandatory projection parameters propop::propop() can use convenience function download Federal Statistical Office (FSO). parameters available level cantons. smaller-scale projections, parameters must scaled . addition parameters, function also returns projected population (.e., number expected people). parameters projections FSO model published 2020. variables births_int_ch mig_ch directly available FSO. calculated function. get projection parameters, must use spelling defined corresponding FSO table. See vignette(\"prepare_data\", package = \"propop\"). Changes API interface may break function. problems occur, recommend following step--step procedure described vignette(\"prepare_data\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get projection parameters from FSO — get_parameters","text":"","code":"get_parameters(   number_fso_ref = \"px-x-0104020000_101\",   number_fso_high = \"px-x-0104020000_102\",   number_fso_low = \"px-x-0104020000_103\",   number_fso_rates = \"px-x-0104020000_109\",   number_fso_births = \"px-x-0104020000_106\",   year_first,   year_last,   spatial_units )"},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get projection parameters from FSO — get_parameters","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_103/-/px-x-0104020000_103.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get projection parameters from FSO — get_parameters","text":"number_fso_ref character, px-x table ID number parameters (reference scenario), defaults \"px-x-0104020000_101\". number_fso_high character, px-x table ID number parameters (high growth scenario), defaults \"px-x-0104020000_102\". number_fso_low character, px-x table ID number parameters (low growth scenario, defaults \"px-x-0104020000_103\". number_fso_rates character, px-x table ID rate parameters, defaults \"px-x-0104020000_109\". number_fso_births character, px-x table ID required compute share Swiss newborns non-Swiss mothers, defaults \"px-x-0104020000_106\". year_first numeric,  first year parameters projections downloaded. year_last numeric, last year parameters projections downloaded. spatial_units character vector, indicating least one spatial entity projection run. Typically canton.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get projection parameters from FSO — get_parameters","text":"data frame rates number people Federal Statistical Office (FSO) required project population development requested spatial entities. four demographic groups (nationality x sex), 101 age classes, resulting total 404 rows per requested year spatial unit.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"demographic-groups","dir":"Reference","previous_headings":"","what":"Demographic groups","title":"Get projection parameters from FSO — get_parameters","text":"returned data frame includes parameters unique combination following demographic variables: nat: ch = Swiss; int = foreign / international. sex: f = female, m = male. age: 101 one-year age classes, ranging 0 100 (including older 100).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Get projection parameters from FSO — get_parameters","text":"following parameters included returned data frame: year: character, year projection. scen: character, projection scenario. birth_rate: numeric, number children per year. births_int_ch: numeric, proportion children Swiss nationality born non-Swiss mothers. mor: numeric, prospective mortality (probability death). emi: numeric, rate people emigrating abroad. acq: numeric, rate acquisition Swiss citizenship. imm_int: numeric, number people immigrating abroad. mig_ch: numeric, national / inter-cantonal net migration (number immigrants minus number emigrants). spatial_unit: character, indicating user requested spatial unit(s).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"projected-population","dir":"Reference","previous_headings":"","what":"Projected population","title":"Get projection parameters from FSO — get_parameters","text":"n_projected number people per demographic group year December 31 (projected FSO 2020 model).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"details-about-calculated-variables","dir":"Reference","previous_headings":"","what":"Details about calculated variables","title":"Get projection parameters from FSO — get_parameters","text":"births_int_ch calculated dividing number live newborns Swiss citizenship born non-Swiss mothers number live newborns born non-Swiss mothers. mig_ch calculated difference immigration cantons emigration cantons.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get projection parameters from FSO — get_parameters","text":"","code":"if (FALSE) { # (Sys.getenv(\"RUN_EXPENSIVE_TESTS\") == \"true\") if (FALSE) { one_canton <- get_parameters(   year_first = 2025,   year_last = 2050,   spatial_units = c(\"Aargau\") ) two_cantons_4years <- get_parameters(   year_first = 2018,   year_last = 2021,   spatial_units = c(\"Aargau\", \"Zug\") ) } }"},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population data from FSO — get_population","title":"Get population data from FSO — get_population","text":"Users required population data can use convenience function get mandatory starting population propop::propop() Federal Statistical Office (FSO). function can also used obtain historical population records (e.g., model performance evaluations). get population data, must use spelling defined corresponding FSO table. details see vignette(\"prepare_data\", package = \"propop\"). Changes API interface may break function. problems occur, see vignette(\"prepare_data\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population data from FSO — get_population","text":"","code":"get_population(   number_fso = \"px-x-0102010000_101\",   year_first,   year_last,   spatial_units )"},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get population data from FSO — get_population","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population data from FSO — get_population","text":"number_fso character, px-x table ID population records, defaults px-x-0102010000_101. year_first numeric, first year population records downloaded. year_last numeric, last year population records downloaded. downloading starting population projection, year_first. year_first requesting starting population propop::propop() spatial_units character vector, indicating least one spatial entity projection run. Typically canton, districts, municipalities.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population data from FSO — get_population","text":"data frame. four demographic groups (female / male, Swiss / foreign nationals), 101 age classes, resulting total 404 rows per requested year spatial unit. Columns included returned data frame: year character, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population data from FSO — get_population","text":"","code":"if (FALSE) { # (Sys.getenv(\"RUN_EXPENSIVE_TESTS\") == \"true\") if (FALSE) { get_population(   number_fso = \"px-x-0102010000_101\",   year_first = 2018,   year_last = 2019,   spatial_units = \"- Aargau\" ) get_population(   year_first = 2018,   year_last = 2018,   spatial_units = c(\"- Aargau\", \"......0301 Aarberg\") ) } }"},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for evaluation — prepare_evaluation","title":"Prepare data for evaluation — prepare_evaluation","text":"functions takes benchmark data (typically population records) population projections prepares combined data frame evaluate performance projection. details usage, see vignette(\"evaluate\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for evaluation — prepare_evaluation","text":"","code":"prepare_evaluation(   data_benchmark,   data_projected,   drop_start_year = FALSE,   age_groups = NULL )"},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for evaluation — prepare_evaluation","text":"data_benchmark data frame containing benchmark data (e.g., actual / official population records obtained propop::get_population()). data_projected data frame containing population projections; can created propop::propop(). drop_start_year logical, indicating starting population shall removed data_projected. age_groups character, optional argument (\"age_groups_3\") indicating data shall aggregated predefined three age groups (0-19, 20-64, 65 years). Using aggregated groups lead smaller projection errors using 101 age classes. Currently one option available aggregating age groups. Defaults using 101 one-year age classes.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for evaluation — prepare_evaluation","text":"Returns data frame number people benchmark projection. row contains unique combination year,  spatial unit, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"input-data-and-variables","dir":"Reference","previous_headings":"","what":"Input data and variables","title":"Prepare data for evaluation — prepare_evaluation","text":"input data frames must contain following variables range years: year character, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character, f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for evaluation — prepare_evaluation","text":"","code":"if (FALSE) { combined <- prepare_evaluation(   data_benchmark = output_get_population,   data_projected = output_propop,   drop_start_year = TRUE ) combined_grouped <- prepare_evaluation(   data_benchmark = output_get_population,   data_projected = output_propop,   drop_start_year = TRUE,   age_groups = \"age_groups_3\" ) }"},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Project population development (raw results) — project_raw","title":"Project population development (raw results) — project_raw","text":"Core function uses cohort component method matrix algebra project population development. function can used different spatial levels (e.g., cantons, municipalities) one scenario time. function provides projections raw version key information missing (e.g., age groups rows represent). conveniently obtain enriched, informative output, use wrapper function propop::propop() (internally uses propop::project_raw()). parameters start populations different spatial levels can obtained Swiss Federal Statistical Office (FSO). instructions download information STAT-TAB, see vignette(\"prepare_data\", package = \"propop\"). projection parameters need passed single data frame project_raw (parameters columns). column types, names, factor levels need match specified . method used calculate projections 'cohort-component analysis' implemented matrices due programming performance benefit compared data frames. nutshell, starting population ('n') multiplied survival rate obtain number people transition projected next year (year + 1). , absolute number people immigrating outside Switzerland migration saldo people outside respective canton added surviving population. results starting population projection next year. Newborn children added aeparately new starting population year. starting population clustered 404 groups: 101 age groups times two nationalities times 2 genders. survival rate calculated function 'create_transition_matrix()' resulting matrix 'L'. use rates mortality, emigration towards countries outside Switzerland rate acquisition Swiss citizenship foreign population calculate survival rates. model FSO also includes rate emigration cantons survival rate. contrast, include immi- emigration cantons adding migration balance (German = 'saldo') (immigration + emigration) afterwards. Steps function: Checks: Checking input data parameter settings correct formats. Data preparation: Preparing vectors e.g. projection time frame creating empty vectors filled data later . Loop years calculating projections Subsetting parameters: Depending selected projection year demographic unit, parameters mortality, fertility, acquisition Swiss citizenship well migration parameters subset demographic group. Create matrices: Matrices build survival rate, mortality, fertility calculating number newborn babies. Creating vectors: Vectors built mortality migration parameters. Projection: transition matrix 'L' multiplied starting population next year. Migrating people added absolute numbers. People 100 years old older clustered one age group (age = 100). newborn babies added resulting starting population next projection year. Aggregating data: projected years aggregated one data frame. function 'propop()', function contained, automatically adds relevant meta data results.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project population development (raw results) — project_raw","text":"","code":"project_raw(   parameters,   year_first,   year_last,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100/205,   n,   subregional )"},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project population development (raw results) — project_raw","text":"parameters data frame containing FSO rates numbers run projection specific spatial level (e.g., canton, municipality). year: projection year. spatial_unit: ID spatial entity (e.g., canton, municipality) run projections. scen: projection scenario, used subset data frames multiple scenarios (r = reference, l = low growth, h = high growth scenario). nat: nationality (ch = Swiss; int = foreign / international). sex: sex (f = female, m = male). age: age classes; typically ranging 0 100 (incl. >100). birth_rate: number children per year. births_int_ch proportion children Swiss nationality born non-Swiss mothers. mor: prospective mortality rate (probability death). acq: rate acquisition Swiss citizenship. emi: rate people emigrating abroad. mig_ch: national / inter-cantonal net migration (number immigrants - number emigrants). imm_int: number people immigrating abroad. mig_sub: within canton net migration. Useful account movements different subregions (e.g., municipalities). argument optional. year_first numeric, first year projected. year_last numeric, last year projected. age_groups numeric, number age classes. Creates vector 1-year age classes running 0 (age_groups - 1). Defaults 101 (FSO standard number age groups). fert_first numeric, first year female fertility. Defaults 16 (FSO standard value). fert_last numeric, last year female fertility. Defaults 50 (FSO standard value). share_born_female numeric, fraction female babies. Defaults 100 / 205 (FSO standard value). n number people per demographic group year; year year_first. Typically extracted data frame created propop::get_population(). subregional boolean, TRUE indicates subregional migration patterns (e.g., movement municipalities within canton) part projection.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project population development (raw results) — project_raw","text":"Returns unformatted unlabeled data frame. includes number people demographic group per year (starting year projected years. number rows corresponds product years demographic groups (e.g., nationality (2) X sex (2) X age groups (101) = 404). Variables included output: n number people per demographic group. IMM_INT number immigrants countries. MIG_CH number people migrating / superordinate spatial units (typically cantons). MIG_SUB number migrants within superordinate spatial unit (typically canton). MOR number deaths (among people older 0). EMI_INT number emigrants countries. ACQ number foreigners acquire Swiss citizenship (naturalisations). BIRTHS number births.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project population development (raw results) — project_raw","text":"","code":"# load package data data(fso_parameters) data(fso_population)  # run projection project_raw(   parameters = fso_parameters,   year_first = 2019,   year_last = 2019,   n = fso_population |> dplyr::pull(n),   subregional = FALSE ) |>   head(10) #> Running projection for: Aargau #> ✔ Year: 2019 #>       N IMM_INT MIG_CH MIG_SUB MOR EMI_INT ACQ BIRTHS #> 1  2506       2     17       0  NA      NA  NA     NA #> 2  2589      15     34       0  NA      NA  NA     NA #> 3  2568      15     26       0  NA      NA  NA     NA #> 4  2635      14     23       0  NA      NA  NA     NA #> 5  2710      13     16       0  NA      NA  NA     NA #> 6  2608      11     10       0  NA      NA  NA     NA #> 7  2569      10      7       0  NA      NA  NA     NA #> 8  2611       9      6       0  NA      NA  NA     NA #> 9  2634       8      2       0  NA      NA  NA     NA #> 10 2512       7      1       0  NA      NA  NA     NA"},{"path":"https://statistik-aargau.github.io/propop/reference/propop-package.html","id":null,"dir":"Reference","previous_headings":"","what":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","title":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","text":"purpose package project development population different spatial levels (e.g., cantons, districts, municipalities) using cohort component method parameters provided Federal Statistical Office (FSO).","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/reference/propop-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","text":"Maintainer: Norah Efosa norah.efosa@ag.ch Authors: Adrian Gadient adrian.gadient@ag.ch (ORCID) Tina Cornioley tina.cornioley@vd.ch Jan Wunder jan.wunder@sg.ch Niklas Haffert niklas.haffert@sg.ch contributors: Andrea Plüss andrea.pluess@ag.ch [contributor] Nadine Herrmann [contributor] Statistik Aargau [funder, copyright holder]","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":null,"dir":"Reference","previous_headings":"","what":"Project population development (enriched results) — propop","title":"Project population development (enriched results) — propop","text":"Project population development using cohort component method (see e.g., details). wrapper function runs projection returns clean data frame clearly labeled variables variable levels. parameters start population can obtained Swiss Federal Statistical Office (FSO). instructions download information STAT-TAB, see vignette(\"prepare_data\", package = \"propop\"). details use function project population development level canton, see vignette(\"run_projections\", package = \"propop\"). projection parameters need passed propop::propop() single data frame (parameters columns). column types, names, factor levels need match specifications listed parameters:","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project population development (enriched results) — propop","text":"","code":"propop(   parameters,   population,   year_first,   year_last,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100/205,   subregional,   binational,   spatial_unit = \"spatial_unit\" )"},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project population development (enriched results) — propop","text":"parameters data frame containing FSO rates numbers run projection specific spatial level (e.g., canton, municipality). year character, projection year. spatial_unit, character, ID spatial entity (e.g., canton, municipality) run projections. scen, character, projection scenario, used subset data frames multiple scenarios (r = reference, l = low growth, h = high growth). nat, character, OPTIONAL; nationality (ch = Swiss; int = foreign/international). sex, character (f = female, m = male). age, numeric, typically ranging 0 100 (incl. >100). birth_rate, numeric, number children per year. births_int_ch, numeric, OPTIONAL; proportion children Swiss nationality born non-Swiss mothers. mor, numeric, prospective mortality rate (probability death). acq, numeric, OPTIONAL; rate acquisition Swiss citizenship. emi, numeric, rate people emigrating abroad. mig_ch, numeric, national / inter-cantonal net migration (number immigrants - number emigrants). imm_int, numeric, number people immigrating abroad. mig_sub, numeric, within canton net migration. Useful account movements different subregions (e.g., municipalities). argument optional. population data frame including starting population demographic group. Possible values parameters (apart year). year character, year_first - 1. spatial_unit character. nat character. sex character. age numeric. n numeric, number people per demographic group. year_first numeric, first year projected. year_last numeric, last year projected. age_groups numeric, number age classes. Creates vector 1-year age classes running 0 (age_groups - 1). Defaults 101 (FSO standard number age groups). fert_first numeric, first year female fertility. Defaults 16 (FSO standard value). fert_last numeric, last year female fertility. Defaults 50 (FSO standard value). share_born_female numeric, fraction female babies. Defaults 100 / 205 (FSO standard value). subregional boolean, TRUE indicates subregional migration patterns (e.g., movement municipalities within canton) part projection. binational boolean, TRUE indicates projections discriminate two groups nationalities. FALSE indicates distinction groups nationalities. spatial_unit character, name variable containing names region subregions projection shall performed.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project population development (enriched results) — propop","text":"Returns data frame includes number people demographic group per year (starting year projected year). number rows product years times demographic groups (e.g., nationality (2) * sex (2) * age groups (101) = 404). Variables included output: age integer. sex factor, female (f) male (m). nat factor, Swiss (ch) international / foreign (int). year integer, indicating starting year / projected years. spatial_levels factor, spatial levels projection run (e.g., canton, municipalities). n double, number people per demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project population development (enriched results) — propop","text":"","code":"# Run projection for the sample data (whole canton of Aargau) propop(   parameters = fso_parameters,   year_first = 2019,   year_last = 2022,   population = fso_population,   subregional = FALSE,   binational = TRUE ) #> Running projection for: Aargau #> ✔ Year: 2019 #> ✔ Year: 2020 #> ✔ Year: 2021 #> ✔ Year: 2022 #> # A tibble: 2,020 × 6 #>      age sex   nat    year spatial_unit     n #>    <int> <fct> <fct> <int> <fct>        <dbl> #>  1     0 m     ch     2018 Aargau        2506 #>  2     1 m     ch     2018 Aargau        2589 #>  3     2 m     ch     2018 Aargau        2568 #>  4     3 m     ch     2018 Aargau        2635 #>  5     4 m     ch     2018 Aargau        2710 #>  6     5 m     ch     2018 Aargau        2608 #>  7     6 m     ch     2018 Aargau        2569 #>  8     7 m     ch     2018 Aargau        2611 #>  9     8 m     ch     2018 Aargau        2634 #> 10     9 m     ch     2018 Aargau        2512 #> # ℹ 2,010 more rows"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 101 — stattab_101_snap","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"","code":"stattab_101_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 102 — stattab_102_snap","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"","code":"stattab_102_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 103 — stattab_103_snap","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"","code":"stattab_103_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 106 — stattab_106_snap","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"","code":"stattab_106_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"object class tbl_df (inherits tbl, data.frame) 102 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 109 — stattab_109_snap","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"","code":"stattab_109_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"object class tbl_df (inherits tbl, data.frame) 174 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"","code":"stattab_pop_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"object class tbl_df (inherits tbl, data.frame) 2431 rows 7 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":[]},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"development-history-and-earlier-versions-0-1-0","dir":"Changelog","previous_headings":"","what":"Development history and earlier versions","title":"propop 0.1.0","text":"propop package successor staagBevProj (publicly available), last updated December 2022. staagBevProj developed Tina Cornioley, Jan Wunder, Niklas Haffert. head Official Statistics Aargau, Andrea Plüss supported devlopment well publication staagBevProj propop. propop developed Norah Efosa Adrian Gadient (Statistik Aargau). main innovations : Clearer separation code prepares data code runs projection Centrally united FSO parameters corrections / adjustments; now gathered single data frame passed projection function one function run projections (rather projectPop projectAll) Convenience functions directly download data parameters STAT-TAB Incorporation assertions unit tests Function evaluate projection results Clearer documentation","code":""}]
